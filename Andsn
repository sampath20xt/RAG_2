import streamlit as st
from streamlit_chat import message  # For chat-like interface
from pymongo import MongoClient
import json
from bson import json_util

# MongoDB Configuration
def initialize_mongo():
    """Initialize MongoDB connection."""
    mongo_url = "mongodb+srv://admin:Sampath@cluster01.wcpmehz.mongodb.net/"
    client = MongoClient(mongo_url)
    return client["RAG"]

# Helper Functions
def execute_generated_query(generated_query, db):
    """Execute MongoDB queries dynamically."""
    try:
        collection_name = generated_query.split('["')[1].split('"]')[0]
        query_type = generated_query.split('.')[1].split('(')[0]
        query_params = generated_query.split('(', 1)[1].rsplit(')', 1)[0]
        collection = db[collection_name]

        if query_type == "find":
            query = json.loads(query_params.strip())
            result = list(collection.find(query))
        else:
            return {"error": f"Unsupported query type: {query_type}"}

        return result
    except Exception as e:
        return {"error": str(e)}

def generate_query(question):
    """Generate a MongoDB query based on user input."""
    return f'db["articles"].find({{"area": "Technology"}})'

# Streamlit Layout and Workflow
def main():
    # MongoDB Initialization
    database = initialize_mongo()

    # Page Setup
    st.set_page_config(page_title="RAG Chat", page_icon="üí¨", layout="centered")

    # Page Title
    st.markdown("<h1 style='text-align: center;'>Welcome to RAG Chat</h1>", unsafe_allow_html=True)

    # Chat History Management
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display Chat in a Scrollable Container
    st.markdown("<div style='max-height: 400px; overflow-y: scroll; border: 1px solid #ddd; padding: 10px; border-radius: 5px;'>", unsafe_allow_html=True)
    for msg in st.session_state.messages:
        if msg["role"] == "user":
            message(msg["content"], is_user=True, key=f"user_{msg['content']}")
        else:
            message(msg["content"], key=f"bot_{msg['content']}")
    st.markdown("</div>", unsafe_allow_html=True)

    # Input Box with Submit Button
    st.markdown(
        """
        <style>
            .submit-button {
                position: relative;
                display: inline-block;
                margin-left: 5px;
                cursor: pointer;
                background-color: #1F4E79;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 6px 10px;
                font-size: 14px;
            }
        </style>
        """,
        unsafe_allow_html=True,
    )
    col1, col2 = st.columns([8, 1])

    with col1:
        user_input = st.text_input(
            "",
            key="user_input",
            placeholder="Enter your question here...",
            label_visibility="collapsed",
        )
    with col2:
        if st.button("‚û§", use_container_width=False):
            if user_input:  # Process only if input is provided
                # Step 1: Add User Input to Chat
                st.session_state.messages.append({"role": "user", "content": user_input})

                # Step 2: Generate Query
                generated_query = generate_query(user_input)

                # Step 3: Execute the Query
                query_result = execute_generated_query(generated_query, database)

                # Step 4: Prepare Bot Response
                if isinstance(query_result, list):
                    bot_message = f"Query executed successfully. Result: {query_result[:5]} (showing first 5 results)"
                else:
                    bot_message = f"Error: {query_result.get('error')}"

                # Step 5: Add Bot Response to Chat
                st.session_state.messages.append({"role": "bot", "content": bot_message})

                # Step 6: Clear Input Field
                st.session_state.user_input = ""

    # Footer
    st.markdown("<footer style='text-align: center;'>Developed with ‚ù§Ô∏è using Streamlit</footer>", unsafe_allow_html=True)

if __name__ == "__main__":
    main()
