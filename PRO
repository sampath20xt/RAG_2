from pymongo import MongoClient
from sentence_transformers import SentenceTransformer
import chromadb
import os
import vertexai
from vertexai.preview.generative_models import GenerativeModel
from vertexai.generative_models import HarmCategory, HarmBlockThreshold

# Initialize MongoDB
mongo_url = "mongodb+srv://admin:Sampath@cluster01.wcpmehz.mongodb.net/"
mongo_client = MongoClient(mongo_url)
db = mongo_client["RAG"]

# Collections
collections = ["articles", "careers", "practices", "teams"]

# Extract schema information
schema_info = {}
for collection_name in collections:
    collection = db[collection_name]
    first_document = collection.find_one()
    if first_document:
        schema_info[collection_name] = list(first_document.keys())

# Print extracted schema information
print("Schema Information:", schema_info)

# Initialize ChromaDB
chroma_client = chromadb.Client()
chroma_collection = chroma_client.create_collection(name="BOTcollection")
print("Created the collection in ChromaDB")

# Initialize Google Vertex AI
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "email-extraction-381718-3f73208ce3b71.json"
vertexai.init(project="email-extraction-381718", location="us-central1")
generative_multimodal_model = GenerativeModel("gemini-1.5-pro-001")

# Initialize SentenceTransformer
model = SentenceTransformer('all-MiniLM-L6-v2')
for collection_name, columns in schema_info.items():
    embedding = model.encode(collection_name)
    chroma_collection.add(
        embeddings=[embedding],
        metadatas=[{"table_name": collection_name, "columns": ",".join(columns)}],
        ids=[collection_name]
    )
print("Stored Tables in ChromaDB:", chroma_collection.get()["metadatas"])

# Function to generate embeddings
def generate_embedding(text):
    return model.encode(text)

# Function to find the most similar table
def similar_table(query):
    query_embedding = generate_embedding(query)
    results = chroma_collection.query(query_embeddings=[query_embedding], n_results=3)  # Fetch top 3 matches
    return results["metadatas"]

# Function to run MongoDB queries
def run_query(query_structure):
    try:
        if "join" in query_structure:
            # Handle multi-collection joins
            left_collection = db[query_structure["left_collection"]]
            pipeline = [
                {
                    "$lookup": {
                        "from": query_structure["right_collection"],
                        "localField": query_structure["local_field"],
                        "foreignField": query_structure["foreign_field"],
                        "as": "joined_data"
                    }
                },
                {"$unwind": "$joined_data"},
                {"$match": query_structure["filters"]},
                {"$project": query_structure["projection"]}
            ]
            result = left_collection.aggregate(pipeline)
        else:
            # Handle single-collection queries
            collection = db[query_structure["collection"]]
            result = collection.find(query_structure["filters"], query_structure["projection"])
        
        result_list = [doc for doc in result]
        return result_list
    except Exception as e:
        return {"error": str(e)}

# Function to generate MongoDB queries
def generate_mongo_query(query, schema_info):
    prompt = f"""
    You are an expert in MongoDB. Generate a MongoDB query in JSON format based on the user query and schema information below.
    Consider single-collection queries and multi-collection joins if necessary.

    Schema information:
    {schema_info}

    User query: {query}

    Output the query structure in JSON with keys:
    - collection: For single-collection queries
    - filters: Filter conditions
    - projection: Fields to retrieve
    - For joins: include keys 'left_collection', 'right_collection', 'local_field', 'foreign_field', and 'filters'.
    """
    generation_config = {
        "max_output_tokens": 1000,
        "temperature": 0.5,
        "top_p": 0.9,
    }

    response = generative_multimodal_model.generate_content([prompt], generation_config=generation_config)
    return eval(response.text.strip())  # Convert the JSON string to a Python dictionary

# Workflow
user_question = "Who are the team members for the title Administrative law?"
print("User Question:", user_question)

# Find the most relevant tables
relevant_tables = similar_table(user_question)
print("Most Relevant Tables:", relevant_tables)

# Generate the MongoDB query structure
query_structure = generate_mongo_query(user_question, schema_info)
print("Generated MongoDB Query Structure:", query_structure)

# Run the query and print results
query_result = run_query(query_structure)
print("Query Result:")
if isinstance(query_result, list) and query_result:
    for doc in query_result:
        print(doc)
elif isinstance(query_result, list):
    print("No results found.")
else:
    print(query_result)
