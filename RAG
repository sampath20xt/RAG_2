from pymongo import MongoClient
from sentence_transformers import SentenceTransformer
import chromadb
import os
import vertexai
from vertexai.preview.generative_models import GenerativeModel
from vertexai.generative_models import HarmCategory, HarmBlockThreshold

# Initialize MongoDB
mongo_url = "mongodb+srv://admin:Sampath@cluster01.wcpmehz.mongodb.net/"
mongo_client = MongoClient(mongo_url)
db = mongo_client["RAG"]

# Collections
collections = ["articles", "careers", "practices", "teams"]

# Extract schema information
schema_info = {}
for collection_name in collections:
    collection = db[collection_name]
    first_document = collection.find_one()
    if first_document:
        schema_info[collection_name] = list(first_document.keys())

# Print extracted schema information
print("Schema Information:", schema_info)

# Initialize ChromaDB
chroma_client = chromadb.Client()
chroma_collection = chroma_client.create_collection(name="BOTcollection")
print("Created the collection in ChromaDB")

# Initialize Google Vertex AI
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "email-extraction-381718-3f73208ce3b71.json"
vertexai.init(project="email-extraction-381718", location="us-central1")
generative_multimodal_model = GenerativeModel("gemini-1.5-pro-001")

# Initialize SentenceTransformer
model = SentenceTransformer('multi-qa-distilbert-cos-v1')

# Function to generate embeddings
def generate_embedding(text):
    return model.encode(text)

# Function to find the most similar table
def similar_table(query):
    query_embedding = generate_embedding(query)
    # Assume table embeddings were stored in ChromaDB for comparison
    results = chroma_collection.query(query_embeddings=[query_embedding], n_results=1)
    return results["metadatas"]

# Function to run a SQL query
def run_query(sql_query):
    try:
        # Implement database connection and query execution (placeholder for your DB setup)
        print(f"Executing SQL Query: {sql_query}")
        # Example: Replace this with your actual database execution logic
        result = [{"message": "Query executed successfully."}]  # Placeholder
        return result
    except Exception as e:
        return {"error": str(e)}

# Function to generate SQL query using Vertex AI
def get_response(query, schema_info):
    prompt = f"""
    You are a data analyst at a company. You are interacting with a user who is asking you questions about the company's database.
    Your role is to generate the SQL query to the user's question based on the schema_info given below.
    The schema info is in keys values pair where keys are table names and values are column names.
    Generate the SQL query using those tables and column names from the given schema info.
    Take the conversation history into account.
    Write only the SQL query and nothing else. Do not wrap the SQL query in any other text, not even backticks.

    Schema information:
    {schema_info}

    User query: {query}
    """
    generation_config = {
        "max_output_tokens": 8192,
        "temperature": 0.3,
        "top_p": 0.5,
    }

    safety_settings = {
        HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    }

    response = generative_multimodal_model.generate_content([prompt],
                                                            generation_config=generation_config,
                                                            safety_settings=safety_settings)
    return response.text.strip()

# Example workflow
user_question = "Who are the leaders of the title Administrative law?"
print("User Question:", user_question)

# Find the most relevant table
relative_table = similar_table(user_question)
print("Most Relevant Table:", relative_table)

# Generate SQL query using schema info
response_sql = get_response(user_question, schema_info)
print("Generated SQL Query:", response_sql)

# Run the SQL query
result = run_query(response_sql)
print("Query Result:", result)
