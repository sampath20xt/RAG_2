def execute_generated_query(generated_query, db):
    try:
        print("Generated Query:", generated_query)  # Debugging

        # Parse the generated query
        collection_name = generated_query.split('["')[1].split('"]')[0]
        query_type = generated_query.split('.')[1].split('(')[0]
        query_params = generated_query.split('(', 1)[1].rsplit(')', 1)[0]
        collection = db[collection_name]

        if query_type == "find":
            # Handle cases with and without projection
            if ',' in query_params:  # If projection exists
                query, projection = query_params.split(",", 1)
                # Properly parse JSON while escaping quotes in $regex
                query = json.loads(query.strip().replace("'", '"'))
                projection = json.loads(projection.strip().replace("'", '"'))
                result = list(collection.find(query, projection))
            else:  # No projection
                query = json.loads(query_params.strip().replace("'", '"'))
                result = list(collection.find(query))
        elif query_type == "count_documents":
            query = json.loads(query_params.strip().replace("'", '"'))
            result = collection.count_documents(query)
        elif query_type == "aggregate":
            pipeline = json_util.loads(query_params.strip().replace("'", '"'))
            result = list(collection.aggregate(pipeline))
        elif query_type == "distinct":
            query = json.loads(query_params.strip().replace("'", '"'))
            result = list(collection.distinct(query))
        else:
            raise ValueError(f"Unsupported query type: {query_type}")

        print("Query Result:", result)
        return result
    except Exception as e:
        print("Error during query execution:", e)
        return {"error": str(e)}
