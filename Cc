To resolve the issues systematically and provide robust methods for both vector search and executing generated queries in all cases, we will adopt the following improvements:

Key Improvements

	1.	Vector Search:
	•	Use ChromaDB’s vector-based query capabilities effectively.
	•	Include metadata filtering with vector similarity results to identify the most relevant table and schema.
	2.	Robust Query Execution:
	•	Create a better mechanism to parse and execute MongoDB queries.
	•	Handle edge cases like missing projections, $regex operations, and improper escaping in a uniform way.

Improved Vector Search and Query Execution

Enhanced execute_generated_query

We will handle:
	1.	Proper JSON parsing.
	2.	Dynamic support for find, aggregate, and distinct queries.
	3.	Graceful handling of nested queries like $regex or $lookup.

import json
from bson import json_util


def execute_generated_query(generated_query, db):
    try:
        print("Generated Query:", generated_query)  # Debugging

        # Parse collection name and query type
        collection_name = generated_query.split('["')[1].split('"]')[0]
        query_type = generated_query.split('.')[1].split('(')[0]
        query_params = generated_query.split('(', 1)[1].rsplit(')', 1)[0]
        collection = db[collection_name]

        # Handle query execution by type
        if query_type == "find":
            # Check if query includes projection
            if ',' in query_params:
                query, projection = query_params.split(",", 1)
                query = json.loads(query.strip().replace("'", '"'))
                projection = json.loads(projection.strip().replace("'", '"'))
                result = list(collection.find(query, projection))
            else:
                query = json.loads(query_params.strip().replace("'", '"'))
                result = list(collection.find(query))

        elif query_type == "count_documents":
            query = json.loads(query_params.strip().replace("'", '"'))
            result = collection.count_documents(query)

        elif query_type == "aggregate":
            pipeline = json_util.loads(query_params.strip().replace("'", '"'))
            result = list(collection.aggregate(pipeline))

        elif query_type == "distinct":
            query_field = query_params.strip().replace("'", '"')
            result = list(collection.distinct(query_field))

        else:
            raise ValueError(f"Unsupported query type: {query_type}")

        print("Query Result:", result)
        return result

    except json.JSONDecodeError as e:
        print(f"JSON Decode Error: {e}")
        return {"error": f"JSON Decode Error: {str(e)}"}
    except Exception as e:
        print(f"Error during query execution: {e}")
        return {"error": str(e)}

Enhanced Vector Search with Metadata Filtering

Use ChromaDB’s vector similarity results to select the most relevant table dynamically.

Updated similar_table with Metadata

This method will:
	•	Perform a vector search for similarity.
	•	Retrieve metadata to identify the most relevant table and schema dynamically.

def similar_table(query, chroma_collection, model):
    query_embedding = model.encode(query)

    # Perform vector search
    results = chroma_collection.query(query_embeddings=[query_embedding], n_results=1)

    if results and results["metadatas"]:
        metadata = results["metadatas"][0]
        return metadata.get("collection_name"), metadata.get("schema_info")
    return None, None

Complete Workflow

With the improved methods, the workflow looks as follows:
	1.	Vector Search to Identify Collection:

collection_name, schema_info = similar_table(user_question, chroma_collection, model)
if not collection_name:
    print("No relevant collection found.")


	2.	Generate MongoDB Query Using generate_query:

query = generate_query(user_question)
print("Generated Query:", query)


	3.	Execute the Generated Query Dynamically:

result = execute_generated_query(query, db)
print("Query Result:", result)

Example Usage

# Example usage
question = "Show all articles authored by 'Phillips Lytle' with the title containing 'Super Lawyers'."

# Step 1: Identify collection and schema
collection_name, schema_info = similar_table(question, chroma_collection, model)
if collection_name:
    print(f"Most Relevant Collection: {collection_name}, Schema Info: {schema_info}")

    # Step 2: Generate query
    generated_query = generate_query(question)
    print("Generated MongoDB Query:", generated_query)

    # Step 3: Execute query
    result = execute_generated_query(generated_query, db)
    print("Query Result:", result)
else:
    print("No relevant collection found.")

Advantages of this Approach

	1.	Flexibility: Supports various query types like find, aggregate, and distinct.
	2.	Robust Parsing: Handles JSON parsing, escaping, and edge cases seamlessly.
	3.	Dynamic Metadata Usage: Enhances the accuracy of vector search by leveraging schema metadata.

Next Steps

	1.	Integrate the updated methods (execute_generated_query and similar_table) into your existing code.
	2.	Test with a variety of questions to validate their robustness.
	3.	Let me know if you encounter issues or need further refinements!
