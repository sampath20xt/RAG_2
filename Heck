import streamlit as st
from pymongo import MongoClient
from langchain_core.messages import AIMessage, HumanMessage
from langchain_core.prompts import ChatPromptTemplate
from vertexai.generative_models import GenerativeModel
import json
from bson import json_util

# Streamlit page setup
st.set_page_config(page_title="RAG Chatbot", layout="centered")

# MongoDB connection setup
mongo_url = "mongodb+srv://admin:Sampath@cluster01.wcpmehz.mongodb.net/"
mongo_client = MongoClient(mongo_url)
database = mongo_client["RAG"]

# Vertex AI generative model setup
vertexai.init(project="email-extraction-381718", location="us-central1")
generative_multimodal_model = GenerativeModel("gemini-1.5-pro-001")

# Custom CSS for chatbot styling with icons
st.markdown("""
    <style>
        .chat-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-height: 500px;
            overflow-y: auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #ffffff;
        }
        .user-message, .bot-message {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .user-message img, .bot-message img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }
        .user-bubble {
            background-color: #0084ff;
            color: white;
            padding: 10px;
            border-radius: 15px;
            max-width: 60%;
        }
        .bot-bubble {
            background-color: #f1f0f0;
            padding: 10px;
            border-radius: 15px;
            max-width: 60%;
        }
    </style>
""", unsafe_allow_html=True)

# Initialize session state
if "messages" not in st.session_state:
    st.session_state.messages = []  # Stores HumanMessage and AIMessage

# Chat prompt template
prompt_template = ChatPromptTemplate.from_messages(
    [
        HumanMessage(
            content="You are an expert MongoDB query generator. Based on the schema and the user's input, generate a MongoDB query."
        ),
        HumanMessage(content="{user_input}")
    ]
)

# Function to execute MongoDB query
def execute_generated_query(generated_query, db):
    try:
        collection_name = generated_query.split('["')[1].split('"]')[0]
        query_type = generated_query.split('.')[1].split('(')[0]
        query_params = generated_query.split('(', 1)[1].rsplit(')', 1)[0]
        collection = db[collection_name]

        if query_type == "find":
            if ',' in query_params:
                query, projection = query_params.split(",", 1)
                query = json.loads(query.strip())
                projection = json.loads(projection.strip())
                result = list(collection.find(query, projection))
            else:
                query = json.loads(query_params.strip())
                result = list(collection.find(query))
        elif query_type == "aggregate":
            pipeline = json_util.loads(query_params.strip())
            result = list(collection.aggregate(pipeline))
        else:
            raise ValueError(f"Unsupported query type: {query_type}")

        return result

    except Exception as e:
        return {"error": str(e)}

# Chat interface
st.title("RAG Chatbot")

# Chat history
st.markdown('<div class="chat-container">', unsafe_allow_html=True)
for message in st.session_state.messages:
    if isinstance(message, HumanMessage):
        st.markdown(f'''
            <div class="user-message">
                <img src="https://via.placeholder.com/40/0084ff/FFFFFF?text=U" alt="User">
                <div class="user-bubble">{message.content}</div>
            </div>
        ''', unsafe_allow_html=True)
    elif isinstance(message, AIMessage):
        st.markdown(f'''
            <div class="bot-message">
                <img src="https://via.placeholder.com/40/CCCCCC/FFFFFF?text=B" alt="Bot">
                <div class="bot-bubble">{message.content}</div>
            </div>
        ''', unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)

# Chat input
user_input = st.text_area("Type your message here...", key="user_input")
if st.button("Send"):
    if user_input.strip():
        # Add user input as HumanMessage
        st.session_state.messages.append(HumanMessage(content=user_input))
        st.experimental_rerun()  # Update UI immediately

        # Generate MongoDB query
        prompt = prompt_template.format(user_input=user_input)
        response = generative_multimodal_model.generate_content([prompt], max_output_tokens=300).text.strip()

        # Add generated query as AIMessage
        st.session_state.messages.append(AIMessage(content=f"Generated Query:\n{response}"))

        # Execute the generated query
        result = execute_generated_query(response, database)
        if "error" in result:
            result_message = f"Error: {result['error']}"
        else:
            result_message = f"Result:\n{result}"
        
        # Add query result as AIMessage
        st.session_state.messages.append(AIMessage(content=result_message))
        st.experimental_rerun()  # Update UI again
