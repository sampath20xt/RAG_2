import streamlit as st
from pymongo import MongoClient
from sentence_transformers import SentenceTransformer
from vertexai.generative_models import HarmCategory, HarmBlockThreshold
from vertexai.preview.generative_models import GenerativeModel
import json
from bson import json_util

# Streamlit page setup
st.set_page_config(page_title="RAG Q&A", layout="centered")

# MongoDB connection setup
mongo_url = "mongodb+srv://admin:Sampath@cluster01.wcpmehz.mongodb.net/"
mongo_client = MongoClient(mongo_url)
database = mongo_client["RAG"]

# Vertex AI generative model setup
vertexai.init(project="email-extraction-381718", location="us-central1")
generative_multimodal_model = GenerativeModel("gemini-1.5-pro-001")


# Function to generate MongoDB query from user question
def generate_query(question):
    prompt = f"""
        You are a MongoDB expert. Your task is to generate accurate MongoDB queries based on the schema provided below.
        Add double quotes to all the field names while generating the MongoDB query.
        Use the schema and sample questions provided to guide the generation.

        <SCHEMA>
        - Collection: articles
          Fields: ["_id", "title", "body", "area", "firm"]

        - Collection: careers
          Fields: ["_id", "position", "location", "experience", "employment type", "compensation", "pay type", "firm"]

        - Collection: practices
          Fields: ["_id", "title", "specializations", "leaders", "team members", "firm"]

        - Collection: teams
          Fields: ["_id", "name", "position", "phone", "email", "education", "achievements", "admissions", "affiliations", "firm"]

        Question: {question}
        MongoDB Query:
    """
    generation_config = {
        "max_output_tokens": 8192,
        "temperature": 0.3,
        "top_p": 0.5,
    }

    response = generative_multimodal_model.generate_content([prompt],
                                                            generation_config=generation_config)

    return response.text.strip()


# Function to execute the generated MongoDB query
def execute_generated_query(generated_query, db):
    try:
        collection_name = generated_query.split('["')[1].split('"]')[0]
        query_type = generated_query.split('.')[1].split('(')[0]
        query_params = generated_query.split('(', 1)[1].rsplit(')', 1)[0]
        collection = db[collection_name]

        if query_type == "find":
            if ',' in query_params:
                query, projection = query_params.split(",", 1)
                query = json.loads(query.strip())
                projection = json.loads(projection.strip())
                result = list(collection.find(query, projection))
            else:
                query = json.loads(query_params.strip())
                result = list(collection.find(query))
        elif query_type == "aggregate":
            pipeline = json_util.loads(query_params.strip())
            result = list(collection.aggregate(pipeline))
        else:
            raise ValueError(f"Unsupported query type: {query_type}")

        return result

    except Exception as e:
        return {"error": str(e)}


# Streamlit application
st.title("Question & Answer - RAG System")

# User input for the question
question = st.text_input("Ask a question:")
if st.button("Get Answer") and question:
    st.write("Processing your question...")
    
    # Generate query
    generated_query = generate_query(question)
    st.write("Generated Query:")
    st.code(generated_query, language="python")

    # Execute query and display result
    result = execute_generated_query(generated_query, database)
    if "error" in result:
        st.error(f"Error: {result['error']}")
    else:
        st.write("Query Result:")
        st.json(result)
