import json
import os
import streamlit as st
from pymongo import MongoClient
from bson import json_util
from sentence_transformers import SentenceTransformer
import chromadb
import vertexai
from dotenv import load_dotenv, find_dotenv
from vertexai.generative_models import HarmCategory, HarmBlockThreshold
from vertexai.preview.generative_models import GenerativeModel
from Questions import mongo_revenue_questions, mongo_aging_questions, mongo_dispatch_questions, mongo_driver_questions

# Load environment variables
load_dotenv(find_dotenv())
mongo_uri = os.getenv('MONGO_URI')
database = os.getenv('DATABASE')
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "email-extraction-381718-3f73208ce3b71.json"

# Initialize Vertex AI generative model
vertexai.init(project="email-extraction-381718", location="us-central1")
generative_multimodal_model = GenerativeModel("gemini-1.5-flash-001")

# MongoDB client and database setup
client = MongoClient(mongo_uri)
db1 = client[database]

# Load questions data
with open("data.json", "r") as questions_file:
    ques = json.load(questions_file)

# Initialize ChromaDB client and collection
chroma_client = chromadb.Client()
collection = chroma_client.create_collection(name="RAG_collection")


# Function to retrieve MongoDB schema
def get_schema(db):
    schema_info = {}
    collections = db.list_collection_names()
    for collection_name in collections:
        collection = db[collection_name]
        sample_record = collection.find_one()
        if sample_record:
            schema_info[collection_name] = {key: type(value).__name__ for key, value in sample_record.items()}
        else:
            schema_info[collection_name] = "No records found"
    return schema_info


# Generate embeddings for ChromaDB
def generate_embedding(query):
    model = SentenceTransformer('multi-qa-distilbert-cos-v1')
    return model.encode(query)


def get_all_collection_schemas_and_store_prompts():
    schema = get_schema(db1)  # Retrieve schema information from MongoDB
    print(schema)

    # Mapping of collection names to related questions
    collection_questions_map = {
        "driver_performance": mongo_driver_questions,
        "dispatch": mongo_dispatch_questions,
        "revenue": mongo_revenue_questions,
        "aging": mongo_aging_questions
    }

    for collection_name, fields in schema.items():
        field_names = ' '.join(fields.keys())  # Concatenate field names
        schema_info = f"{collection_name}:{field_names}"

        # Retrieve questions related to the collection
        sample_questions = collection_questions_map.get(collection_name, '')

        # Create and store the get_response prompt in ChromaDB
        prompt = (f"""
                <SCHEMA>{schema_info}</SCHEMA>
                """ + """
                Write only the MongoDB query and nothing else. Do not wrap the MongoDB query in any other text, not even backticks. """
                  + sample_questions +
                  f"""
                Question: {{}}
                MongoDB Query :
                """)

        # Insert the schema information and generated prompt into ChromaDB
        collection.upsert(
            ids=[collection_name],
            metadatas=[{"collection_name": collection_name, "schema_info": schema_info, "prompt": prompt}],
            embeddings=generate_embedding([schema_info])
        )
    return None


vector_database_info = get_all_collection_schemas_and_store_prompts()

print("Schemas and prompts have been successfully stored in ChromaDB")

# Define Streamlit app structure
st.title("MongoDB Query Generator")
st.write("Generate MongoDB queries based on user questions.")

# User input for question
question = st.text_input("Enter your question:")

def execute_generated_query(generated_query, db):
    collection_name = generated_query.split('["')[1].split('"]')[0]
    query_type = generated_query.split('.')[1].split('(')[0]
    query_params = generated_query.split('(', 1)[1].rsplit(')', 1)[0]
    collection = db[collection_name]
    if query_type == "count_documents":
        query = json_util.loads(query_params)
        result = collection.count_documents(query)
    elif query_type == "find":
        query = json_util.loads(query_params)
        result = list(collection.find(query))
    elif query_type == "aggregate":
        pipeline = json_util.loads(query_params)
        result = list(collection.aggregate(pipeline))
    elif query_type == "distinct":
        query = json_util.loads(query_params)
        result = list(collection.distinct(query))
    else:
        raise ValueError(f"Unsupported query type: {query_type}")
    print(result)
    return result


# Function to generate query from question
def generate_query(question):
    prompt = """
            your role is to generate the accurate MongoDB query to the user's question based on the SCHEMA INFORMATION given below.
            Add double quotes to all the property names while generating MongoDB Query.
            The generated MongoDB Query should be the same format as given sample MongoDb Queries.
            you are a statistics analyst at a business enterprise. you're interacting with a user who is asking you questions about the business enterprise's database.
            Take the conversation history into account.""" + f"""

             <SCHEMA>{vector_database_info}</SCHEMA>
            """ + """
            Write only the MongoDB query and nothing else. Do not wrap the MongoDB query in any other text, not even backticks. 
            Question: which 3 artists have the most tracks?
            MongoDB Query: db["tracks"].aggregate([{{"$group": {{"_id": "$ArtistId", "count": {{"$sum": 1}}}}, {{"$sort": {{"count": -1}}}}, {{"$limit": 3}}])
            Question: Give me the total count of completed orders?
            MongoDB Query: db["dispatch"].aggregate([{ "$match": { "status": "COMPLETED" } },{"$group": {"_id": null,"completedDispatchCount": { "$sum": 1 }}}])
            Question: Give me the total count of exception orders?
            MongoDB Query: db["dispatch"].aggregate([{ "$match": { "status": "EXCEPTION" } },{"$group": {"_id": null,"exceptionDispatchCount": { "$sum": 1 }}}])
            Question: Do we have any orders that are yet to be delivered?
            MongoDB Query: db["dispatch"].aggregate([{"$match": { "status": {"$nin": ["COMPLETED", "REJECTED", "CANCELLED", "CLOSED", "EXCEPTIONS"]}} },{"$group": {"_id": null,"yetToBeDeliveredCount": { "$sum": 1 }}}])
            Question: Give me top 3 drivers?
            MongoDB Query: db["driver_performance"].aggregate([
            {"$group": {"_id": "$driver_id", "driver_name": {"$first": "$name"}, "attempted_orders": {"$sum": "$order_attempted"}}},
            {"$sort": {"attempted_orders": -1}},
            {"$limit": 3}
            ])
            Question: What is the total revenue of completed orders?
            MongoDB Query: db["dispatch"].aggregate([{"$match": {"status": "COMPLETED"}},
            {"$lookup": {"from": "revenue","localField": "customer_order_id","foreignField": "customer_order_id","as": "revenue_info"}},
            {"$unwind": "$revenue_info"},{"$group": {"_id": null,"total_amount_in_billions": {"$sum": "$revenue_info.total_amount"}}}])'
            Question: How many drivers do I have?
            MongoDB Query: db["driver_performance"].aggregate([{"$group" : {"_id":"$driver_id"}},{"$count":"uniqueDriverCount"}])
            Question: Give me the total amount for past due 90 days?
            MongoDB Query: db["aging"].aggregate([{{"$group": {{"_id": null, "total_pending_amount": {{"$sum": {{"$add": ["$0-30", "$31-45", "$46-60", "$61-90"]}}}}}}])
            Question: Give me the complete order information related to 65d62cee822dd63f4ede200b?
            MongoDB Query: db["dispatch"].find({{"customer_order_id": "65d62cee822dd63f4ede200b"}})
            Question: Give me the total revenue in 2024?
            MongoDB Query: db["revenue"].aggregate([
            {"$addFields": {"billing_date_parsed": {"$dateFromString": {"dateString": "$billing_date", "format": "%d-%m-%Y"}}}},
            {"$match": {"billing_date_parsed": {"$gte": {"$date": "2024-01-01T00:00:00Z"}, "$lt": {"$date": "2025-01-01T00:00:00Z"}}}},
            {"$group": {"_id": null, "total_revenue_2024": {"$sum": "$total_amount"}}}])
            Question :What is the average travel distance?
            MongoDB Query :db["driver_performance"].aggregate([{"$group": {"_id": null, "average_travel_distance": {"$avg": "$travel_distance"}}}])  
            Question: how many orders attempted by Rick Powell driver in the month of may?
            MongoDB Query :db["dispatch"].aggregate([{"$match": {"month_name": "May", "account_name": "Rick Powell"}}, {"$group": {"_id": null, "total_orders": {"$sum": 1 }}}])
            Question : Completed orders and incompleted orders percentage?     
            MongoDB Query: db["driver_performance"].aggregate([{"$group": {"_id": null, "average_completion_rate": {"$avg": "$Completed_Percentage"}, "average_incompletion_rate": {"$avg": "$Incompleted_Percentage"}}}])

            """ + f"""
            Question: {question}
            MongoDB Query : 
            """
    generation_config = {
        "max_output_tokens": 8192,
        "temperature": 0.3,
        "top_p": 0.5,
    }

    safety_settings = {
        HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    }
    response = generative_multimodal_model.generate_content([prompt],
                                                            generation_config=generation_config,
                                                            safety_settings=safety_settings)

    return response.text




# Execute query and display results
if question:
    st.write("Generated MongoDB Query:")
    generated_query = generate_query(question)
    st.code(generated_query, language="python")

    # Display query result if valid
    st.write("Query Result:")
    try:
        result = execute_generated_query(generated_query, db1)
        st.write(result)
    except Exception as e:
        st.error(f"Query execution failed: {e}")
