def execute_generated_query(generated_query, db):
    try:
        print("Generated Query:", generated_query)  # Debugging

        # Parse collection name and query type
        collection_name = generated_query.split('["')[1].split('"]')[0]
        query_type = generated_query.split('.')[1].split('(')[0]
        query_params = generated_query.split('(', 1)[1].rsplit(')', 1)[0]
        collection = db[collection_name]

        # Handle query execution by type
        if query_type == "find":
            if ',' in query_params:
                query, projection = query_params.split(",", 1)
                query = json.loads(query.strip().replace("'", '"'))
                projection = json.loads(projection.strip().replace("'", '"'))
                result = list(collection.find(query, projection))
            else:
                query = query_params.strip().replace("'", '"')

                # Fix any numeric fields like $gt or $lt
                query = query.replace('"$gt": "4 years"', '"$gt": 4')

                query = json.loads(query)
                result = list(collection.find(query))
        elif query_type == "count_documents":
            query = json.loads(query_params.strip().replace("'", '"'))
            result = collection.count_documents(query)
        elif query_type == "aggregate":
            pipeline = json_util.loads(query_params.strip().replace("'", '"'))
            result = list(collection.aggregate(pipeline))
        elif query_type == "distinct":
            query_field = query_params.strip().replace("'", '"')
            result = list(collection.distinct(query_field))
        else:
            raise ValueError(f"Unsupported query type: {query_type}")

        print("Query Result:", result)
        return result

    except json.JSONDecodeError as e:
        print(f"JSON Decode Error: {e}")
        return {"error": f"JSON Decode Error: {str(e)}"}
    except Exception as e:
        print(f"Error during query execution: {e}")
        return {"error": str(e)}
