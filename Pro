import json
import os
from pymongo import MongoClient
from bson import json_util
from sentence_transformers import SentenceTransformer
import chromadb
import vertexai
from dotenv import load_dotenv, find_dotenv
from vertexai.generative_models import HarmCategory, HarmBlockThreshold
from vertexai.preview.generative_models import GenerativeModel

# Load environment variables
load_dotenv(find_dotenv())
mongo_uri = os.getenv('MONGO_URI')  # MongoDB URI
database = os.getenv('DATABASE')  # Database name
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "email-extraction-381718-3f73208ce3b71.json"  # Google credentials

# Initialize Vertex AI generative model
vertexai.init(project="email-extraction-381718", location="us-central1")
generative_multimodal_model = GenerativeModel("gemini-1.5-pro-001")

# MongoDB client and database setup
client = MongoClient(mongo_uri)
db = client[database]

# Initialize ChromaDB client and collection
chroma_client = chromadb.Client()
chroma_collection = chroma_client.create_collection(name="RAG_collection")


# Function to retrieve MongoDB schema
def get_schema(db):
    schema_info = {}
    collections = db.list_collection_names()
    for collection_name in collections:
        collection = db[collection_name]
        sample_record = collection.find_one()
        if sample_record:
            schema_info[collection_name] = {key: type(value).__name__ for key, value in sample_record.items()}
        else:
            schema_info[collection_name] = "No records found"
    return schema_info


# Generate embeddings for ChromaDB
def generate_embedding(query):
    model = SentenceTransformer('multi-qa-distilbert-cos-v1')
    return model.encode(query)


def get_all_collection_schemas_and_store_prompts():
    schema = get_schema(db)  # Retrieve schema information from MongoDB
    print(schema)

    for collection_name, fields in schema.items():
        field_names = ' '.join(fields.keys())
        schema_info = f"{collection_name}:{field_names}"

        # Create a prompt for storing schema info in ChromaDB
        prompt = f"<SCHEMA>{schema_info}</SCHEMA>"
        chroma_collection.upsert(
            ids=[collection_name],
            metadatas=[{"collection_name": collection_name, "schema_info": schema_info, "prompt": prompt}],
            embeddings=generate_embedding(schema_info)
        )
    return schema


# Store schema information and prompts in ChromaDB
vector_database_info = get_all_collection_schemas_and_store_prompts()
print("Schemas and prompts have been successfully stored in ChromaDB")


# Function to execute generated MongoDB queries
def execute_generated_query(generated_query, db):
    try:
        collection_name = generated_query.split('["')[1].split('"]')[0]
        query_type = generated_query.split('.')[1].split('(')[0]
        query_params = generated_query.split('(', 1)[1].rsplit(')', 1)[0]
        collection = db[collection_name]
        if query_type == "count_documents":
            query = json_util.loads(query_params)
            result = collection.count_documents(query)
        elif query_type == "find":
            query = json_util.loads(query_params)
            result = list(collection.find(query))
        elif query_type == "aggregate":
            pipeline = json_util.loads(query_params)
            result = list(collection.aggregate(pipeline))
        elif query_type == "distinct":
            query = json_util.loads(query_params)
            result = list(collection.distinct(query))
        else:
            raise ValueError(f"Unsupported query type: {query_type}")
        return result
    except Exception as e:
        return {"error": str(e)}


# Function to generate MongoDB query from user question
def generate_query(question):
    prompt = f"""
        You are a MongoDB expert. Your task is to generate accurate MongoDB queries based on the schema provided below.
        Add double quotes to all the field names while generating the MongoDB query.
        Use the schema and sample questions provided to guide the generation.
        
        <SCHEMA>
        - Collection: articles
          Fields: ["_id", "title", "body", "area", "firm"]

        - Collection: careers
          Fields: ["_id", "position", "location", "experience", "employment type", "compensation", "pay type", "firm"]

        - Collection: practices
          Fields: ["_id", "title", "specializations", "leaders", "team members", "firm"]

        - Collection: teams
          Fields: ["_id", "name", "position", "phone", "email", "education", "achievements", "admissions", "affiliations", "firm"]

        Sample Questions and MongoDB Queries:
        Question: What are all the articles related to the area 'General'?
        MongoDB Query: db["articles"].find({{"area": "General"}})

        Question: List all positions available in Albany, NY, with compensation above $130,000.
        MongoDB Query: db["careers"].find({{"location": "Albany, NY", "compensation": {{"$gt": 130000}}}})

        Question: Who are the leaders in 'Bankruptcy and Creditors Rights Law'?
        MongoDB Query: db["practices"].find({{"title": "Bankruptcy and Creditors Rights Law"}}, {{"leaders": 1, "_id": 0}})

        Question: Provide the details of all team members associated with 'Phillips Lytle'.
        MongoDB Query: db["teams"].find({{"firm": "Phillips Lytle"}})

        Question: Show articles authored by 'Phillips Lytle' with the title containing 'Super Lawyers'.
        MongoDB Query: db["articles"].find({{"firm": "Phillips Lytle", "title": {{"$regex": "Super Lawyers", "$options": "i"}}}})
        
        Question: {question}
        MongoDB Query:
    """
    generation_config = {
        "max_output_tokens": 8192,
        "temperature": 0.3,
        "top_p": 0.5,
    }

    safety_settings = {
        HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
        HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    }

    # Call Vertex AI's generative model to generate the query
    response = generative_multimodal_model.generate_content([prompt],
                                                            generation_config=generation_config,
                                                            safety_settings=safety_settings)

    return response.text.strip()


# Example usage
question = "List all team members affiliated with 'New York'."
generated_query = generate_query(question)
print("Generated MongoDB Query:")
print(generated_query)

result = execute_generated_query(generated_query, db)
print("Query Result:")
print(result)
