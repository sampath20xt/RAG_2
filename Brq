import streamlit as st
from streamlit_chat import message  # For chat-like interface
from pymongo import MongoClient
import json
from bson import json_util

# MongoDB Configuration
def initialize_mongo():
    """Initialize MongoDB connection."""
    mongo_url = "mongodb+srv://admin:Sampath@cluster01.wcpmehz.mongodb.net/"
    client = MongoClient(mongo_url)
    return client["RAG"]

# Helper Functions
def execute_generated_query(generated_query, db):
    """Execute MongoDB queries dynamically."""
    try:
        collection_name = generated_query.split('["')[1].split('"]')[0]
        query_type = generated_query.split('.')[1].split('(')[0]
        query_params = generated_query.split('(', 1)[1].rsplit(')', 1)[0]
        collection = db[collection_name]

        if query_type == "find":
            query = json.loads(query_params.strip())
            result = list(collection.find(query))
        else:
            return {"error": f"Unsupported query type: {query_type}"}

        return result
    except Exception as e:
        return {"error": str(e)}

def generate_query(question):
    """Generate a MongoDB query based on user input."""
    return f'db["articles"].find({{"area": "Technology"}})'

# Streamlit Layout and Workflow
def main():
    # MongoDB Initialization
    database = initialize_mongo()

    # Page Setup
    st.set_page_config(page_title="RAG Chat", page_icon="üí¨", layout="centered")

    # Page Title
    st.markdown("<h1 style='text-align: center; color: #1F4E79;'>Welcome to RAG Chat</h1>", unsafe_allow_html=True)

    # Chat History Management
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Custom CSS to position input box at the bottom
    st.markdown(
        """
        <style>
            .chat-container {
                display: flex;
                flex-direction: column;
                justify-content: space-between;
                height: 85vh;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 10px;
                background-color: #f9f9f9;
            }
            .chat-history {
                flex-grow: 1;
                overflow-y: auto;
                padding: 10px;
                border-bottom: 1px solid #ddd;
            }
            .chat-input {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            .chat-input input {
                flex-grow: 1;
                padding: 10px;
                font-size: 16px;
                border: 1px solid #ddd;
                border-radius: 5px;
            }
            .chat-input button {
                margin-left: 10px;
                padding: 10px;
                background-color: #1F4E79;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }
            .chat-input button:hover {
                background-color: #003366;
            }
        </style>
        """,
        unsafe_allow_html=True,
    )

    # Chat Container
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)

    # Chat History
    st.markdown('<div class="chat-history">', unsafe_allow_html=True)
    for msg in st.session_state.messages:
        if msg["role"] == "user":
            message(msg["content"], is_user=True, key=f"user_{msg['content']}")
        else:
            message(msg["content"], key=f"bot_{msg['content']}")
    st.markdown('</div>', unsafe_allow_html=True)

    # Input Box
    st.markdown('<div class="chat-input">', unsafe_allow_html=True)
    user_input = st.text_input(
        "",
        key="user_input",
        placeholder="Enter your question here...",
        label_visibility="collapsed",
    )
    if st.button("‚û§", use_container_width=False):
        if user_input:  # Process only if input is provided
            # Step 1: Add User Input to Chat
            st.session_state.messages.append({"role": "user", "content": user_input})

            # Step 2: Generate Query
            generated_query = generate_query(user_input)

            # Step 3: Execute the Query
            query_result = execute_generated_query(generated_query, database)

            # Step 4: Prepare Bot Response
            if isinstance(query_result, list):
                bot_message = f"Query executed successfully. Result: {query_result[:5]} (showing first 5 results)"
            else:
                bot_message = f"Error: {query_result.get('error')}"

            # Step 5: Add Bot Response to Chat
            st.session_state.messages.append({"role": "bot", "content": bot_message})

            # Step 6: Clear Input Field
            st.session_state.user_input = ""
    st.markdown('</div>', unsafe_allow_html=True)

    # Close Chat Container
    st.markdown('</div>', unsafe_allow_html=True)

    # Footer
    st.markdown("<footer style='text-align: center;'>Developed with ‚ù§Ô∏è using Streamlit</footer>", unsafe_allow_html=True)


if __name__ == "__main__":
    main()
